Note: SISRS writing into data folder
**** SISRS ****
===Running Subcommand identifyFixedSites Alone===
[mpileup] 1 samples in 1 input files
<mpileup> Set max per-file depth to 8000
[mpileup] 1 samples in 1 input files
<mpileup> Set max per-file depth to 8000
[mpileup] 1 samples in 1 input files
<mpileup> Set max per-file depth to 8000
[mpileup] 1 samples in 1 input files
<mpileup> Set max per-file depth to 8000
[mpileup] 1 samples in 1 input files
<mpileup> Set max per-file depth to 8000
[mpileup] 1 samples in 1 input files
<mpileup> Set max per-file depth to 8000
[mpileup] 1 samples in 1 input files
<mpileup> Set max per-file depth to 8000
[mpileup] 1 samples in 1 input files
<mpileup> Set max per-file depth to 8000
Settings:
  Output files: "/data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/HylMol/contigs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/HylMol/contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 35890
Using parameters --bmax 26918 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26918 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 20508.1 (target: 26917)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (26918) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 13689
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 13690
Getting block 2 of 7
  Reserving size (26918) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 17891
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 17892
Getting block 3 of 7
  Reserving size (26918) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 16300
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 16301
Getting block 4 of 7
  Reserving size (26918) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 23712
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23713
Getting block 5 of 7
  Reserving size (26918) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 25858
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 25859
Getting block 6 of 7
  Reserving size (26918) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 26558
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 26559
Getting block 7 of 7
  Reserving size (26918) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 19549
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 19550
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 46848
fchr[G]: 71731
fchr[T]: 97015
fchr[$]: 143563
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4245056 bytes to primary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/HylMol/contigs.1.bt2
Wrote 35896 bytes to secondary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/HylMol/contigs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 143563
    bwtLen: 143564
    sz: 35891
    bwtSz: 35891
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8973
    offsSz: 35892
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 748
    numLines: 748
    ebwtTotLen: 47872
    ebwtTotSz: 47872
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 35890
Using parameters --bmax 26918 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26918 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 8; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 20508.1 (target: 26917)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (26918) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 23707
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23708
Getting block 2 of 7
  Reserving size (26918) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 21322
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 21323
Getting block 3 of 7
  Reserving size (26918) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 25231
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 25232
Getting block 4 of 7
  Reserving size (26918) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 16029
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 16030
Getting block 5 of 7
  Reserving size (26918) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 22807
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 22808
Getting block 6 of 7
  Reserving size (26918) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 7570
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 7571
Getting block 7 of 7
  Reserving size (26918) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 26891
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 26892
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 46848
fchr[G]: 71731
fchr[T]: 97015
fchr[$]: 143563
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4245056 bytes to primary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/HylMol/contigs.rev.1.bt2
Wrote 35896 bytes to secondary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/HylMol/contigs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 143563
    bwtLen: 143564
    sz: 35891
    bwtSz: 35891
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8973
    offsSz: 35892
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 748
    numLines: 748
    ebwtTotLen: 47872
    ebwtTotSz: 47872
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Building a SMALL index
Settings:
  Output files: "/data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/GorGor/contigs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/GorGor/contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 35917
Using parameters --bmax 26938 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26938 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 20523.1 (target: 26937)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 16049
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 16050
Getting block 2 of 7
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 23351
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23352
Getting block 3 of 7
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 23871
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23872
Getting block 4 of 7
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 26073
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 26074
Getting block 5 of 7
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 23323
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23324
Getting block 6 of 7
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 6102
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 6103
Getting block 7 of 7
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 24893
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 24894
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 46913
fchr[G]: 71816
fchr[T]: 97068
fchr[$]: 143668
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4244436 bytes to primary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/GorGor/contigs.1.bt2
Wrote 35924 bytes to secondary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/GorGor/contigs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 143668
    bwtLen: 143669
    sz: 35917
    bwtSz: 35918
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8980
    offsSz: 35920
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 749
    numLines: 749
    ebwtTotLen: 47936
    ebwtTotSz: 47936
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 35917
Using parameters --bmax 26938 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26938 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 17957.6 (target: 26937)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 8363
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 8364
Getting block 2 of 8
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 24316
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 24317
Getting block 3 of 8
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 16453
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 16454
Getting block 4 of 8
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 26099
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 26100
Getting block 5 of 8
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 15405
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 15406
Getting block 6 of 8
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 25214
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 25215
Getting block 7 of 8
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 23887
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23888
Getting block 8 of 8
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 3924
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 3925
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 46913
fchr[G]: 71816
fchr[T]: 97068
fchr[$]: 143668
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4244436 bytes to primary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/GorGor/contigs.rev.1.bt2
Wrote 35924 bytes to secondary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/GorGor/contigs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 143668
    bwtLen: 143669
    sz: 35917
    bwtSz: 35918
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8980
    offsSz: 35920
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 749
    numLines: 749
    ebwtTotLen: 47936
    ebwtTotSz: 47936
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Building a SMALL index
Settings:
  Output files: "/data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/MacMul/contigs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/MacMul/contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 35871
Using parameters --bmax 26904 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26904 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 20496.9 (target: 26903)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (26904) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 11971
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 11972
Getting block 2 of 7
  Reserving size (26904) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 25728
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 25729
Getting block 3 of 7
  Reserving size (26904) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 24651
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 24652
Getting block 4 of 7
  Reserving size (26904) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 7607
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 7608
Getting block 5 of 7
  Reserving size (26904) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 24906
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 24907
Getting block 6 of 7
  Reserving size (26904) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 23074
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23075
Getting block 7 of 7
  Reserving size (26904) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 25541
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 25542
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 46901
fchr[G]: 71774
fchr[T]: 97007
fchr[$]: 143484
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4245656 bytes to primary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/MacMul/contigs.1.bt2
Wrote 35876 bytes to secondary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/MacMul/contigs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 143484
    bwtLen: 143485
    sz: 35871
    bwtSz: 35872
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8968
    offsSz: 35872
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 748
    numLines: 748
    ebwtTotLen: 47872
    ebwtTotSz: 47872
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 35871
Using parameters --bmax 26904 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26904 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 20496.9 (target: 26903)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (26904) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 23514
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23515
Getting block 2 of 7
  Reserving size (26904) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 23385
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23386
Getting block 3 of 7
  Reserving size (26904) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 9167
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 9168
Getting block 4 of 7
  Reserving size (26904) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 24496
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 24497
Getting block 5 of 7
  Reserving size (26904) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 22374
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 22375
Getting block 6 of 7
  Reserving size (26904) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 17858
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 17859
Getting block 7 of 7
  Reserving size (26904) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 22684
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 22685
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 46901
fchr[G]: 71774
fchr[T]: 97007
fchr[$]: 143484
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4245656 bytes to primary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/MacMul/contigs.rev.1.bt2
Wrote 35876 bytes to secondary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/MacMul/contigs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 143484
    bwtLen: 143485
    sz: 35871
    bwtSz: 35872
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8968
    offsSz: 35872
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 748
    numLines: 748
    ebwtTotLen: 47872
    ebwtTotSz: 47872
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Building a SMALL index
Settings:
  Output files: "/data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/MacFas/contigs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/MacFas/contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 35868
Using parameters --bmax 26901 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26901 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 20495.4 (target: 26900)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (26901) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 25157
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 25158
Getting block 2 of 7
  Reserving size (26901) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 12666
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12667
Getting block 3 of 7
  Reserving size (26901) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 24323
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 24324
Getting block 4 of 7
  Reserving size (26901) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 24267
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 24268
Getting block 5 of 7
  Reserving size (26901) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 23303
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23304
Getting block 6 of 7
  Reserving size (26901) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 20834
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 20835
Getting block 7 of 7
  Reserving size (26901) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 12918
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12919
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 46912
fchr[G]: 71746
fchr[T]: 97007
fchr[$]: 143474
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4245716 bytes to primary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/MacFas/contigs.1.bt2
Wrote 35876 bytes to secondary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/MacFas/contigs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 143474
    bwtLen: 143475
    sz: 35869
    bwtSz: 35869
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8968
    offsSz: 35872
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 748
    numLines: 748
    ebwtTotLen: 47872
    ebwtTotSz: 47872
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 35868
Using parameters --bmax 26901 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26901 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 3, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 15940.7 (target: 26900)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (26901) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 20566
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 20567
Getting block 2 of 9
  Reserving size (26901) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 24321
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 24322
Getting block 3 of 9
  Reserving size (26901) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 6908
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 6909
Getting block 4 of 9
  Reserving size (26901) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 20273
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 20274
Getting block 5 of 9
  Reserving size (26901) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 8555
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 8556
Getting block 6 of 9
  Reserving size (26901) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 21170
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 21171
Getting block 7 of 9
  Reserving size (26901) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 6048
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 6049
Getting block 8 of 9
  Reserving size (26901) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 26515
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 26516
Getting block 9 of 9
  Reserving size (26901) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 9110
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 9111
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 46912
fchr[G]: 71746
fchr[T]: 97007
fchr[$]: 143474
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4245716 bytes to primary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/MacFas/contigs.rev.1.bt2
Wrote 35876 bytes to secondary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/MacFas/contigs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 143474
    bwtLen: 143475
    sz: 35869
    bwtSz: 35869
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8968
    offsSz: 35872
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 748
    numLines: 748
    ebwtTotLen: 47872
    ebwtTotSz: 47872
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Building a SMALL index
Settings:
  Output files: "/data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PanPan/contigs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PanPan/contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 35916
Using parameters --bmax 26937 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26937 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 17957.5 (target: 26936)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (26937) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 3818
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 3819
Getting block 2 of 8
  Reserving size (26937) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 25338
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 25339
Getting block 3 of 8
  Reserving size (26937) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 17537
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 17538
Getting block 4 of 8
  Reserving size (26937) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 23098
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23099
Getting block 5 of 8
  Reserving size (26937) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 20737
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 20738
Getting block 6 of 8
  Reserving size (26937) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 21533
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 21534
Getting block 7 of 8
  Reserving size (26937) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 18571
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 18572
Getting block 8 of 8
  Reserving size (26937) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 13028
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 13029
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 46941
fchr[G]: 71823
fchr[T]: 97042
fchr[$]: 143667
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4244460 bytes to primary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PanPan/contigs.1.bt2
Wrote 35924 bytes to secondary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PanPan/contigs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 143667
    bwtLen: 143668
    sz: 35917
    bwtSz: 35917
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8980
    offsSz: 35920
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 749
    numLines: 749
    ebwtTotLen: 47936
    ebwtTotSz: 47936
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 35916
Using parameters --bmax 26937 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26937 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 20523 (target: 26936)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (26937) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 16726
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 16727
Getting block 2 of 7
  Reserving size (26937) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 24804
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 24805
Getting block 3 of 7
  Reserving size (26937) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 15434
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 15435
Getting block 4 of 7
  Reserving size (26937) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 14176
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 14177
Getting block 5 of 7
  Reserving size (26937) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 24658
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 24659
Getting block 6 of 7
  Reserving size (26937) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 23829
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23830
Getting block 7 of 7
  Reserving size (26937) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 24034
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 24035
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 46941
fchr[G]: 71823
fchr[T]: 97042
fchr[$]: 143667
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4244460 bytes to primary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PanPan/contigs.rev.1.bt2
Wrote 35924 bytes to secondary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PanPan/contigs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 143667
    bwtLen: 143668
    sz: 35917
    bwtSz: 35917
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8980
    offsSz: 35920
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 749
    numLines: 749
    ebwtTotLen: 47936
    ebwtTotSz: 47936
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Building a SMALL index
Settings:
  Output files: "/data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PonPyg/contigs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PonPyg/contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 35900
Using parameters --bmax 26925 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26925 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 17949.5 (target: 26924)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (26925) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 3654
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 3655
Getting block 2 of 8
  Reserving size (26925) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 25551
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 25552
Getting block 3 of 8
  Reserving size (26925) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 18422
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 18423
Getting block 4 of 8
  Reserving size (26925) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 24111
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 24112
Getting block 5 of 8
  Reserving size (26925) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 20320
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 20321
Getting block 6 of 8
  Reserving size (26925) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 21746
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 21747
Getting block 7 of 8
  Reserving size (26925) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 18342
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 18343
Getting block 8 of 8
  Reserving size (26925) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 11450
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 11451
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 46942
fchr[G]: 71763
fchr[T]: 96933
fchr[$]: 143603
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4244816 bytes to primary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PonPyg/contigs.1.bt2
Wrote 35908 bytes to secondary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PonPyg/contigs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 143603
    bwtLen: 143604
    sz: 35901
    bwtSz: 35901
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8976
    offsSz: 35904
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 748
    numLines: 748
    ebwtTotLen: 47872
    ebwtTotSz: 47872
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:02
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 35900
Using parameters --bmax 26925 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26925 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 20513.9 (target: 26924)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (26925) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 23723
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23724
Getting block 2 of 7
  Reserving size (26925) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 18437
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 18438
Getting block 3 of 7
  Reserving size (26925) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 17270
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 17271
Getting block 4 of 7
  Reserving size (26925) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 15453
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 15454
Getting block 5 of 7
  Reserving size (26925) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 22598
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 22599
Getting block 6 of 7
  Reserving size (26925) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 26398
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 26399
Getting block 7 of 7
  Reserving size (26925) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 19718
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 19719
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 46942
fchr[G]: 71763
fchr[T]: 96933
fchr[$]: 143603
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4244816 bytes to primary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PonPyg/contigs.rev.1.bt2
Wrote 35908 bytes to secondary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PonPyg/contigs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 143603
    bwtLen: 143604
    sz: 35901
    bwtSz: 35901
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8976
    offsSz: 35904
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 748
    numLines: 748
    ebwtTotLen: 47872
    ebwtTotSz: 47872
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Building a SMALL index
Settings:
  Output files: "/data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/HomSap/contigs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/HomSap/contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 35911
Using parameters --bmax 26934 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26934 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 20520 (target: 26933)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (26934) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 14958
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 14959
Getting block 2 of 7
  Reserving size (26934) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 22732
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 22733
Getting block 3 of 7
  Reserving size (26934) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 26609
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 26610
Getting block 4 of 7
  Reserving size (26934) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 25619
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 25620
Getting block 5 of 7
  Reserving size (26934) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 25981
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 25982
Getting block 6 of 7
  Reserving size (26934) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 20360
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 20361
Getting block 7 of 7
  Reserving size (26934) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 7381
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 7382
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 46904
fchr[G]: 71813
fchr[T]: 97026
fchr[$]: 143646
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4244436 bytes to primary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/HomSap/contigs.1.bt2
Wrote 35916 bytes to secondary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/HomSap/contigs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 143646
    bwtLen: 143647
    sz: 35912
    bwtSz: 35912
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8978
    offsSz: 35912
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 749
    numLines: 749
    ebwtTotLen: 47936
    ebwtTotSz: 47936
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:02
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 35911
Using parameters --bmax 26934 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26934 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 20520 (target: 26933)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (26934) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 23495
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23496
Getting block 2 of 7
  Reserving size (26934) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 25426
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 25427
Getting block 3 of 7
  Reserving size (26934) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 26370
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 26371
Getting block 4 of 7
  Reserving size (26934) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 12839
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12840
Getting block 5 of 7
  Reserving size (26934) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 24494
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 24495
Getting block 6 of 7
  Reserving size (26934) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 12987
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12988
Getting block 7 of 7
  Reserving size (26934) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 18029
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 18030
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 46904
fchr[G]: 71813
fchr[T]: 97026
fchr[$]: 143646
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4244436 bytes to primary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/HomSap/contigs.rev.1.bt2
Wrote 35916 bytes to secondary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/HomSap/contigs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 143646
    bwtLen: 143647
    sz: 35912
    bwtSz: 35912
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8978
    offsSz: 35912
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 749
    numLines: 749
    ebwtTotLen: 47936
    ebwtTotSz: 47936
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Building a SMALL index
Settings:
  Output files: "/data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PanTro/contigs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PanTro/contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 35917
Using parameters --bmax 26938 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26938 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 17957.8 (target: 26937)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 16684
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 16685
Getting block 2 of 8
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 12495
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12496
Getting block 3 of 8
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 23646
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23647
Getting block 4 of 8
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 25318
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 25319
Getting block 5 of 8
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 14302
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 14303
Getting block 6 of 8
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 22151
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 22152
Getting block 7 of 8
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 21668
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 21669
Getting block 8 of 8
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 7398
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 7399
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 46958
fchr[G]: 71865
fchr[T]: 97055
fchr[$]: 143669
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4244448 bytes to primary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PanTro/contigs.1.bt2
Wrote 35924 bytes to secondary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PanTro/contigs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 143669
    bwtLen: 143670
    sz: 35918
    bwtSz: 35918
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8980
    offsSz: 35920
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 749
    numLines: 749
    ebwtTotLen: 47936
    ebwtTotSz: 47936
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:02
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 35917
Using parameters --bmax 26938 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26938 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 20523.3 (target: 26937)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 21442
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 21443
Getting block 2 of 7
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 26919
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 26920
Getting block 3 of 7
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 25279
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 25280
Getting block 4 of 7
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 14661
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 14662
Getting block 5 of 7
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 20196
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 20197
Getting block 6 of 7
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 24044
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 24045
Getting block 7 of 7
  Reserving size (26938) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 11122
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 11123
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 46958
fchr[G]: 71865
fchr[T]: 97055
fchr[$]: 143669
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4244448 bytes to primary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PanTro/contigs.rev.1.bt2
Wrote 35924 bytes to secondary EBWT file: /data3/schwartzlab/bob/unique_Apes_SISRS/Anders_Subset/Iterations/2_identifyFixedSites/PanTro/contigs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 143669
    bwtLen: 143670
    sz: 35918
    bwtSz: 35918
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8980
    offsSz: 35920
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 749
    numLines: 749
    ebwtTotLen: 47936
    ebwtTotSz: 47936
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Building a SMALL index
==== Aligning GorGor as Single-Ended ====
62644 reads; of these:
  62644 (100.00%) were unpaired; of these:
    7405 (11.82%) aligned 0 times
    55109 (87.97%) aligned exactly 1 time
    130 (0.21%) aligned >1 times
88.18% overall alignment rate
==== Aligning HomSap as Single-Ended ====
28712 reads; of these:
  28712 (100.00%) were unpaired; of these:
    1979 (6.89%) aligned 0 times
    26674 (92.90%) aligned exactly 1 time
    59 (0.21%) aligned >1 times
93.11% overall alignment rate
==== Aligning HylMol as Single-Ended ====
24872 reads; of these:
  24872 (100.00%) were unpaired; of these:
    4604 (18.51%) aligned 0 times
    20184 (81.15%) aligned exactly 1 time
    84 (0.34%) aligned >1 times
81.49% overall alignment rate
==== Aligning MacFas as Single-Ended ====
14760 reads; of these:
  14760 (100.00%) were unpaired; of these:
    2698 (18.28%) aligned 0 times
    12014 (81.40%) aligned exactly 1 time
    48 (0.33%) aligned >1 times
81.72% overall alignment rate
==== Aligning MacMul as Single-Ended ====
20392 reads; of these:
  20392 (100.00%) were unpaired; of these:
    3778 (18.53%) aligned 0 times
    16549 (81.15%) aligned exactly 1 time
    65 (0.32%) aligned >1 times
81.47% overall alignment rate
==== Aligning PanPan as Single-Ended ====
86790 reads; of these:
  86790 (100.00%) were unpaired; of these:
    10700 (12.33%) aligned 0 times
    76003 (87.57%) aligned exactly 1 time
    87 (0.10%) aligned >1 times
87.67% overall alignment rate
==== Aligning PanTro as Single-Ended ====
86272 reads; of these:
  86272 (100.00%) were unpaired; of these:
    10934 (12.67%) aligned 0 times
    75217 (87.19%) aligned exactly 1 time
    121 (0.14%) aligned >1 times
87.33% overall alignment rate
==== Aligning PonPyg as Single-Ended ====
29114 reads; of these:
  29114 (100.00%) were unpaired; of these:
    6236 (21.42%) aligned 0 times
    22847 (78.47%) aligned exactly 1 time
    31 (0.11%) aligned >1 times
78.58% overall alignment rate
[mpileup] 1 samples in 1 input files
<mpileup> Set max per-file depth to 8000
[mpileup] 1 samples in 1 input files
<mpileup> Set max per-file depth to 8000
[mpileup] 1 samples in 1 input files
<mpileup> Set max per-file depth to 8000
[mpileup] 1 samples in 1 input files
<mpileup> Set max per-file depth to 8000
[mpileup] 1 samples in 1 input files
<mpileup> Set max per-file depth to 8000
[mpileup] 1 samples in 1 input files
<mpileup> Set max per-file depth to 8000
[mpileup] 1 samples in 1 input files
<mpileup> Set max per-file depth to 8000
[mpileup] 1 samples in 1 input files
<mpileup> Set max per-file depth to 8000
==== Done Identifying Fixed Sites Without Error ====
